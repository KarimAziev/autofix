#+OPTIONS: ^:nil tags:nil

* About

Automatically fix common code style issues in Elisp.

* Table of Contents                                       :TOC_2_gh:QUOTE:
#+BEGIN_QUOTE
- [[#about][About]]
- [[#requirenments][Requirenments]]
- [[#installation][Installation]]
  - [[#with-use-package-and-straightel][With use-package and straight.el]]
  - [[#manual-installation][Manual installation]]
- [[#usage][Usage]]
  - [[#minor-mode][Minor mode]]
  - [[#commands][Commands]]
  - [[#customization][Customization]]
#+END_QUOTE

* Requirenments

| Name           | Version |
|----------------+---------|
| Emacs          |    27.1 |
| ~package-lint~ |    0.17 |


* Installation

** With use-package and straight.el
#+begin_src elisp :eval no
(use-package autofix
  :straight (autofix
             :repo "KarimAziev/autofix"
             :type git
             :host github)
  :bind ((:map autofix-multi-completion-map
               ("C-<return>" . autofix-throw-done)
               ("C-M-j" . autofix-throw-done)))
  :commands (autofix
             autofix-footer
             autofix-remove-unused-declarations
             autofix-header
             autofix-autoloads
             autofix-commentary
             autofix-code-comment
             autofix-header-first-line
             autofix-sharpquotes
             autofix-scan-extract-all-docs
             autofix-annotate-buffer
             autofix-url
             autofix-copyright
             autofix-license
             autofix-add-fbound
             autofix-keywords
             autofix-header-body-comment
             autofix-package-requires
             autofix-version
             autofix-update-version
             autofix-author))
#+end_src

** Manual installation

Download the source code and put it wherever you like, e.g. into =~/.emacs.d/autofix/=

#+begin_src shell :eval no
git clone https://github.com/KarimAziev/autofix.git ~/.emacs.d/autofix/
#+end_src

Add the downloaded directory to the load path:

#+begin_src elisp :eval no
(add-to-list 'load-path "~/.emacs.d/autofix/")
(require 'autofix)
#+end_src

* Usage

** Minor mode

**** ~autofix-mode~
Runs =autofix= on file save when this mode is turned on.

** Commands

**** ~autofix~
Apply all functions from =autofix-functions=. Default code fixes includes auto adding auto load comments before all interactive commands and removing unused (declare-function ...) forms. Default comments fixes includes fixes for file headers, package headers, footer etc. File headers fixes can be customized via =autofix-header-functions=.

**** ~autofix-footer~
Add of fix file footer e.g. in the file =myfile.el= it will add or replace:

#+begin_src emacs-lisp
(provide 'myfile)
;;; myfile.el ends here
#+end_src

**** ~autofix-remove-unused-declarations~

Check usage and remove unused declarations:

#+begin_src emacs-lisp
(declare-function unused-function)
#+end_src

**** ~autofix-header~
Apply fixes for header comments. 

| Command                       | Description                                                                    |
|-------------------------------+--------------------------------------------------------------------------------|
| =autofix-header-first-line=   | Fix or create the first comment line in the header                             |
| =autofix-copyright=           | Prompt and fix or make new copyright                                           |
| =autofix-author=              | Add or fix author                                                              |
| =autofix-url=                 | Add of fix URL                                                                 |
| =autofix-version=             | Add or fix package version                                                     |
| =autofix-keywords=            | Add or fix package keywords                                                    |
| =autofix-package-requires=    | Add or fix package requires section                                            |
| =autofix-header-body-comment= | Add comment body (~M-x autofix-comment-section-body~)                          |
| =autofix-commentary=          | Add Commentary section in current buffer if none                               |
| =autofix-code-comment=        | Add Code comment to the end of header block                                    |
| =autofix-license=             | Add SPDX short-form identifier (~M-x customize-variable autofix-spdx-license~) |
|                               |                                                                                |

 You can add or remove commands by customizing the variable =autofix-header-functions=.

**** ~autofix-autoloads~
Add autoload comments before commands in buffer, that doesn't look like private.

**** ~autofix-sharpquotes~
Add a sharpquote (=#'=) when quoting function names. For example, such code:

#+begin_src emacs-lisp
(mapcar 'car '(a b c d))
#+end_src

Transforms to:

#+begin_src emacs-lisp
(mapcar #'car '(a b c d))
#+end_src

You can customize rules by customing a variable =autofix-shartpquote-symbols-spec=.

**** ~autofix-scan-extract-all-docs~
Return string with all docs in all buffer. If called interactively also copies it.
**** ~autofix-annotate-buffer~
Add annotations in header comment section, e.g.:
#+begin_src emacs-lisp
;;; Commands

;; M-x `autofix'
;;      Apply all functions from `autofix-functions'.
;;      Default code fixes includes auto adding auto load comments before all
;;      interactive commands and removing unused (declare-function ...) forms.
;;      Default comments fixes includes fixes for file headers,
;;      package headers, footer etc.
;;      File headers fixes can be customized via `autofix-header-functions'.

;; M-x `autofix-footer'
;;      Add of fix file footer (provide ='filename) with comment ends here.
#+end_src
**** ~autofix-add-fbound~
Wrap undefined function call in fbound.
** Customization

**** ~autofix-ignored-file-patterns~
List of file name bases to ignore.
**** ~autofix-user-fullname~
User email to add in header section.
**** ~autofix-user-email~
User email to add in header section. Can be string, variable or function. Function will be called without args and should return string.
**** ~autofix-functions~
List of functions to apply with command =autofix=.
**** ~autofix-spdx-license~
Default =spdx= short-form identifier.

**** ~autofix-shartpquote-symbols-spec~
Alist of symbols and required sharpquote positions. Each element is a cons which car is either symbol or list of symbols, which cdr is a position of children element, that should be sharquoted.
**** ~autofix-comment-section-body~
Static text for adding in header comment section. It doesn't includes dynamic variables such author, year etc.


